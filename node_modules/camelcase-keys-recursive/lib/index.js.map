{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;sBAAmB,SAAS;;;;AAE5B,IAAM,QAAQ,GAAG,SAAX,QAAQ,CAAI,CAAC;SAAK,OAAO,CAAC,AAAC,KAAK,QAAQ;CAAA,CAAC;;AAE/C,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,GAAG;SAAK,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,UAAC,CAAC,EAAE,CAAC;WAAK,CAAC,CAAC,WAAW,EAAE;GAAA,CAAC;CAAA,CAAC;;AAElF,SAAS,kBAAkB,CAAC,GAAG,EAAE;;AAE/B,MAAM,SAAS,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,yBAAO,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC9D,QAAM,QAAQ,GAAG,EAAE,CAAC;;AAEpB,QAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACtB,SAAG,CAAC,OAAO,CAAC,UAAC,KAAK,EAAK;AACrB,YAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAC5C,kBAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;SAC1C,MAAM;AACL,kBAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;OACF,CAAC,CAAC;;AAEH,aAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;KACnC,MAAM,IAAI,CAAC,GAAG,EAAE;AACf,aAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;KAC9B,MAAM,IAAI,GAAG,YAAY,IAAI,EAAE;AAC9B,aAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;KAC9B,MAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;AACxB,aAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;KAClD;;AAED,WAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;GAC9B,CAAC,CAAC;;AAEH,SAAQ,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,SAAS,CAAE;CAEpE;;qBAEc,kBAAkB","file":"index.js","sourcesContent":["import mapObj from 'map-obj';\n\nconst isObject = (v) => typeof(v) === 'object';\n\nconst camelCase = (str) => str.replace(/[_.-](\\w|$)/g, (_, x) => x.toUpperCase());\n\nfunction camelCaseRecursive(obj) {\n\n  const transform = obj == null ? obj : mapObj(obj, (key, val) => {\n    const newArray = [];\n\n    if (Array.isArray(val)) {\n      val.forEach((value) => {\n        if (isObject(value) && !Array.isArray(value)) {\n          newArray.push(camelCaseRecursive(value));\n        } else {\n          newArray.push(value);\n        }\n      });\n\n      return [camelCase(key), newArray];\n    } else if (!val) {\n      return [camelCase(key), val];\n    } else if (val instanceof Date) {\n      return [camelCase(key), val];\n    } else if (isObject(val)) {\n      return [camelCase(key), camelCaseRecursive(val)];\n    }\n\n    return [camelCase(key), val];\n  });\n\n  return (Array.isArray(obj) ? Object.values(transform) : transform);\n\n}\n\nexport default camelCaseRecursive;\n"]}