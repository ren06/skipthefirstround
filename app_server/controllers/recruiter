var request = require('request');
var common = require('./common');
var emails = require('../common/emails');
var i18n = require('i18n');

var renderRegisterRecruiter = function(req, res, formData, error){

    res.render('recruiter/register', {
        title: i18n.__('Enregistrement'),
        formData: formData,
        pageHeader: {
            title: 'DaF',
        },
        error: error,
    });
};


module.exports.registerRecruiter =  function(req, res){

    if(req.session.authenticated){
        res.redirect('/');
    }

    var formData = {
        email: '',
        firstName: '',
        lastName: '',
        password: '',
        company: '',
        mobilePhone: '',
        confirmationPassword: '',
    };

    renderRegisterRecruiter(req, res, formData, null);

};

module.exports.doRegisterRecruiter = function(req, res){

    //collect data
    var email = req.body.email;
    var firstName = req.body.firstName;
    var lastName = req.body.lastName;
    var mobilePhone = req.body.mobilePhone;
    var company = req.body.company;
    var password = req.body.password;
    var confirmationPassword = req.body.confirmationPassword;
    var language = req.cookies.locale;

    if(typeof language !== 'undefined'){
        language = 'fr';
    }

    var postData = {
        email: email,
        firstName: firstName,
        lastName: lastName,
        mobilePhone: mobilePhone,
        password: password,
        language: language,
        company: company,
    };

    var formData = Object.assign({}, postData);
    formData.confirmationPassword = confirmationPassword;

    //check everything is there
    if(!postData.email || !postData.password || !postData.firstName || !postData.lastName || !postData.company || !postData.mobilePhone ){
        renderRegisterRecruiter(req, res, formData, 'Tous les champs doivent etre remplis');
    }
    else if(password.length < res.locals.config.get('Api.PasswordMinLength')){
        renderRegisterRecruiter(req, res, formData, 'Le mot de passe doit faire au mois 8 caracteres');
    }
    else if(password !== confirmationPassword){
        renderRegisterRecruiter(req, res, formData, 'Le mot de passe ne correspond pas au mot de passe de verification');
    }
    else {
        console.log('Postdata:');
        console.log(postData);

        var requestOptions = common.getRequestOptions(req, '/api/recruiter/', 'POST', postData);

        request(requestOptions, function (err, response, body) {

            if (response.statusCode === 201) {

                //authenticate user
                var token = body.data.token;
                console.log(token);

                common.setSessionData(req, res, body.data, 'recruiter', token, function(){

                    //send email
                    //emails.sendEmailRecruiterRegistration(req.session.email, req.session.fullName);

                    //send le finaud email


                    res.redirect('confirmation');
                });

            }
            else if (( response.statusCode === 400 || response.statusCode === 409 || response.statusCode === 422 ) &&  body.success === false ) {

                console.log(body.internalError);
                renderRegisterRecruiter(req, res, formData, body.userError);

            }
            else {
                console.log('error unhandled ' + err);
                common.showError(req, res, response.statusCode);
            }
        });
    }
}

module.exports.confirmation = function(req, res){

    res.render('recruiter/confirmation', {
        title: i18n.__('Confirmation'),
    });
}

module.exports.mainMenu = function(req, res){

    res.render('recruiter/main-menu', {
        title: i18n.__('Menu'),
    });
}

var renderPostOffer = function(req, res, formData, error){

    res.render('recruiter/post-offer', {
        sectorOptions: req.app.locals.options[res.getLocale()].sectorOptions,
        offerTypeOptions: req.app.locals.options[res.getLocale()].offerTypeOptions,
        companyTypeOptions: req.app.locals.options[res.getLocale()].companyTypeOptions,
        title: i18n.__('Post Offer'),
        formData: formData,
        error: error,
    });
}

module.exports.postOffer = function(req, res){

    var recruiterId = req.session.userId;

    var formData = {
        sector: '',
        offerType: '',
        language: '',
        companyType: '',
        location: '',
        text: '',
        idRecruiter: recruiterId,
    }

    renderPostOffer(req, res, formData);

}

module.exports.doPostOffer = function(req, res){

    var formData = req.body;

    if(!common.checkParametersPresent('sector, offerType, companyType, location, language, text', formData)){

        renderPostOffer(req, res, formData, 'Tous les champs doivent etre remplis');
    }
    else{

        console.log(formData);

        var requestOptions = common.getRequestOptions(req, '/api/offer/', 'POST', formData);
        console.log(requestOptions);
        request(requestOptions, function (err, response, body) {

            if (response.statusCode === 201) {

                res.redirect('main-menu');

            }
            else{
                console.log('error: ' + response.statusCode);
                console.log(body.internalError);
                renderPostOffer(req, res, formData, body.userError);
            }

        });
    }

}

var renderBrowseVideos = function(req, res, formData, results, message){

    //get all cities
    var requestOptions = common.getRequestOptions(req, '/api/offers/locations', 'GET', null);

    request(requestOptions, function (err, response, body) {

        //add 'all' to all drop downs

        var lang = res.getLocale();

        var languageOptions =  common.addAll(req.app.locals.options[lang].languageOptions);
        console.log(languageOptions);
        res.render('recruiter/browse-videos', {
            sectorOptions: common.addAll(req.app.locals.options[lang].sectorOptions),
            offerTypeOptions: common.addAll(req.app.locals.options[lang].offerTypeOptions),
            companyTypeOptions: common.addAll(req.app.locals.options[lang].companyTypeOptions),
            languageOptions: languageOptions,
            locations: common.addAll(body.data),
            title: i18n.__('Browse Videos'),
            formData: formData,
            results: results,
            message: message,
        });
    });


}

module.exports.searchVideos = function(req, res){

    var formData = {
        sector: '0',
        offerType: '0',
        language: '',
        companyType: '0',
        location: '0',

    }

    renderBrowseVideos(req, res, formData, null, null);

}

module.exports.doSearchVideos = function(req, res){

    var formData = req.body;
    console.log(formData);
    var qs = {};

    var keys = Object.keys(formData);

    keys.forEach(function(entry){

        if(formData[entry] != 0){

            qs[entry] = formData[entry];

        }
    });
    console.log(qs);

    //call api
    var requestOptions = common.getRequestOptions(req, '/api/offers/searchForRecruiter', 'GET', null, qs);

    request(requestOptions, function (err, response, body) {

        if (response.statusCode === 200) {

            var results = body.data;
            var message;
            if (!results || results.length == 0) {
                message = 'No results'
            }
            renderBrowseVideos(req, res, formData, results, message);
        }
        else{
            console.log('error: ' + response.statusCode);
            console.log(body.internalError);
        }
    });




}


module.exports.viewFavourites = function(req, res){

    res.render('recruiter/view-favourites', {
        title: i18n.__('View Favourites'),
    });
}

module.exports.myOffers = function(req, res){

    var recruiterId = req.session.userId;

    var requestOptions = common.getRequestOptions(req, '/api/recruiter/' + recruiterId + '/offers', 'GET', null);
    console.log(requestOptions);

    request(requestOptions, function (err, response, body) {

        if (response.statusCode === 200) {

            res.render('recruiter/my-offers', {
                recruiter: body.data[0].recruiter,
                offers: body.data[0].offers,
                title: i18n.__('My offers'),
            });

        }
        else{
            console.log('error: ' + response.statusCode);
            console.log(body.internalError);
        }
    });

}


//GET method
var logOff = function(req, res){

    req.session.destroy();
    console.log('deconnexion ok');
    res.redirect('/');
};


var renderLogin = function(req, res, formData, error){

    res.render('recruiter/login', {
        title: i18n.__('Login'),
        formData: formData,
        error: error,
    });
};


module.exports.login = function(req, res){

    console.log('value inside login GET: ' + req.cookies.role);

    var formData = {
        email: '',
        password: '',
    };

    renderLogin(req, res, formData, '');

}

module.exports.doLogin = function(req, res){

    //collect data
    var email = req.body.email;
    var password = req.body.password;

    var postData = {
        email: email,
        password: password
    };

    //check everything is there
    if(!postData.email || !postData.password ){
        renderLogin(req, res, postdata, 'Tous les champs doivent etre remplis');
    }
    else {

        var requestOptions = common.getRequestOptions(req, '/api/recruiter/login', 'POST', postData, false);

        //Call create user API
        request(requestOptions, function (err, response, body) {

            if (response.statusCode === 200) {

                console.log('identification ok');

                //authenticate user
                common.setSessionData(req, res, body.data.user, 'recruiter', body.data.token, function(){
                    //redirect
                    res.redirect('/recruiter/main-menu');
                });


            }
            else if (( response.statusCode === 401 || response.statusCode === 404 ) &&  body.success === false ) {

                console.log(body.internalError);
                renderLogin(req, res, {email: email, password: ''}, body.userError);
            }
            else {

                console.log('error unhandled ' + response.body );
                common.showError(req, res, response.statusCode);
            }
        });
    }

};








